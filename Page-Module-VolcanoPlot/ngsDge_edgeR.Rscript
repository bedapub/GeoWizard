#! /usr/bin/env Rscript

suppressMessages(library(ribiosArg))
suppressMessages(library(ribiosUtils))
scriptInit()

usage <- paste("Usage:", scriptName(), " -infile FILE [[-designFile FILE -contrastFile FILE|-sampleGroups GROUPS -contrasts CONTRASTS] -groupLevels LEVELS -dispLevels LEVELS] [-outdir DIR] [-log FILE] [-noAnnotation|-featureAnnotationFile FILE] [-appendGmt FILE] [-mps]\n",
               "\n",
               "Mandatory options:\n",
               "  -infile: input GCT or TXT file containing read counts.\n",
               "\n",
               "  Two ways of specifying experiment design and comparisons of interest:\n",
               "  [1] For general design: design and contrast matrices (tsv files with headers and row names)\n",
               "    -designFile: design matrix file. Number of rows must equal number of samples and the order of samples must be identical.\n",
               "    -contrastFile: contrast matrix file  Number of rows must equal number of design matrix columns\n",
               "    -sampleGroups: character strings specifying sample groups, separated by commas(,). If not provided, the groups are guessed automatically from the design matrix.\n",
               "  \n",
               "  [2] For analysis of one-factor experiments: use sampleGroups, groupLevels, and contrasts:\n",
               "    -sampleGroups: character strings specifying sample groups, separated by commas(,)\n",
               "    -contrasts: character strings of arithmetic operations between group levels specifying contrasts, separated by commas(,)\n",
               "  \n",
               "  Common parameters to the two variants of specifying design/contrast matrix:\n",
               "    -groupLevels: character strings specifying levels of the sample groups, separated by commas(,)\n",
               "    -dispLevels: character strings specifying levels of the sample groups when used for display, separated by commas(,)\n",
               "    NOTE: if not provided, groupLevels will be derived from sampleGroups by the alphabetical order\n",
               "    NOTE: group levels must start with character and not contain special characters including + - * % : ,\n",
               "    NOTE: '-sampleGroups', '-contrasts', '-groupLevels', and '-dispLevels' also accepts a plain file as input; each line contains one item\n",
               "\n",
               "Optional options:\n",
	       "  -outdir: output directory. Current working directory is used if unset.\n",
               "  -log: write log to FILE. If FILE is set to '-', logging is written on stdout.\n",
	       "  -noAnnotation: do not annotate genes automatically.\n",
	       "  -featureAnnotationFile FILE: A tab-delimited file with header, feature names in the first column. In order to activate pathway analysis, please include 'GeneSymbol' in the file, which contains human gene symbols. The order of features does not matter.\n",
               "  -appendGmt FILE: Append the gene lists included in the provided GMT file to RONET gene sets to perform gene-set analysis. If more than one gmt files need to be provided, please first concatenate them and provide the single file as input.\n",
	       "  -mps: if given, the input data are assumed as molecular phenotyping data and extra pathway analysis are performed.\n",
	       "\n",
	       "Database options:\n",
	       "  -writedb: If given, the analysis will be stored in the ROGER database (experimental).\n",
 	       "  -phenoData: Name of a tab-delimited file with headers, which provides sample annotation. The first column must be the sample names. It will be stored in the database.\n",
 	       "  -xref: Name of external reference in the format of DB:ID, for instance GEO:GSE33452\n",
	       sep="")

argParse("designFile,1 contrastFile,1 sampleGroups,1 groupLevels,1 dispLevels,1 contrasts,1 outdir,1 log,1 mps,0 noAnnotation,0 featureAnnotationFile,1 appendGmt,1 writedb,0 phenoData,1 xref,1",
         "infile",
         usage)

##----------------------------------------##
## Program starts
##----------------------------------------##
logfile <- argGet("log", default=NULL)
registerLog(logfile)
doLog("%s starts", scriptName())

##----------------------------------------##
## check input parameters
##----------------------------------------##
if(isDebugging()) {
  infile <- "/pstore/apps/bioinfo//geneexpression/data/testdata/test.ngs.gct"
  outdir <- "/pstore/apps/bioinfo//geneexpression/data/testdata/"
  designFile <- NULL
  contrastFile <- NULL
  sampleGroups.vec <- gl(5,2,labels=LETTERS[1:5])
  groupLevels.vec <- c("C", "A", "B", "D", "E")
  dispLevels.vec <- c("Charlie", "Alpha", "Bravo", "Delta", "Echo")
  contrasts.vec <- c("AvC"="A-C",
                     "DvB"="D-B",
                     "EvAB"="E-(A+B)/2")
  commaCollapse <- function(x) {
    xnames <- names(x)
    if(is.null(xnames)) {
      return(paste(x, collapse=","))
    } else {
      return(paste(xnames, x, collapse=",", sep="="))
    }
  }
  sampleGroups <- commaCollapse(sampleGroups.vec)
  groupLevels <- commaCollapse(groupLevels.vec)
  dispLevels <- commaCollapse(dispLevels.vec)
  contrasts <- commaCollapse(contrasts.vec)
  mps <- FALSE
  noAnno <- FALSE
  featureAnnotationFile <- NULL
  appendGmt <- NULL
  writedb <- FALSE
  phenoDataFile <- NULL
  xref <- ""
} else {
  infile <- argGet("infile")
  designFile <- argGet("designFile")
  contrastFile <- argGet("contrastFile")
  sampleGroups <- argGet("sampleGroups")
  groupLevels <- argGet("groupLevels")
  dispLevels <- argGet("dispLevels")
  contrasts <- argGet("contrasts")
  outdir <- argGet("outdir", default=getwd())
  mps <- argPresent("mps")
  noAnno <- argPresent("noAnnotation")
  featureAnnotationFile <- argGet("featureAnnotationFile")
  appendGmt <- argGet("appendGmt")
  writedb <- argPresent("writedb")
  phenoDataFile <- argGet("phenoData")
  xref <- argGet("xref", default="")
}

assertFile(infile)
createDir(outdir)

##----------------------------------------##
## Library loading
##----------------------------------------##
doLog("Library loading")
libordie(ribiosIO)
libordie(ribiosExpression)
libordie(ribiosNGS)
libordie(ribiosPlot)
libordie(ribiosGSEA, minVer="1.3-5") 
libordie(splines) ## implicitly required by edgeR
libordie(made4)
libordie(edgeR)
libordie(lattice)
libordie(gage) ## in case no replicates are available

##----------------------------------------##
## Parameter check
##----------------------------------------##
counts <- read_exprs_matrix(infile)
descon <- parseDesignContrast(designFile=designFile, contrastFile=contrastFile,
                              sampleGroups=sampleGroups,
                              groupLevels=groupLevels,
                              dispLevels=dispLevels,
                              contrasts=contrasts,
                              expSampleNames=colnames(counts))

##----------------------------------------##
## Filtering and estimating disps
##----------------------------------------##
obj <- EdgeObject(counts, descon)

if(!noAnno & is.null(featureAnnotationFile)) {
  doLog("Annotate features with Roche Bioinformatics Services")
  objAnno <- annotate(obj)
} else if (!is.null(featureAnnotationFile)) {
  doLog("Annotate features with annotation file")
  assertFile(featureAnnotationFile)
  featAnno <- readTable(featureAnnotationFile, row.names=FALSE)
  ordFeatAnno <- matchColumn(rownames(counts(obj)), featAnno, 1L)
  objAnno <- obj
  fData(objAnno) <- ordFeatAnno
} else {
  objAnno <- obj
}

doLog("Performing differential gene expression analysis with edgeR")
dgeTest <- dgeWithEdgeR(objAnno)

doLog("Exporting differential gene expression analysis results")
save(dgeTest, file=file.path(outdir, "ngsDge.RData"))
writeDgeTables(dgeTest, outdir=outdir)
writeTruncatedDgeTables(dgeTest, outdir=outdir)
writeMatrix(sigGeneCounts(dgeTest),
    file=file.path(outdir, "ngsDge-diffGeneCounts.txt"), 
    row.names=TRUE)

##----------------------------------------##
## Pathway analysis
##----------------------------------------##
if(noAnno) {
    doLog("Skip pathway analysis due to missing annotation")
} else {
    doLog("Pathway analysis")
    doLog("Importing RONET gene sets", level=1)
    gscs <- ribiosGSEA::readDefaultGenesets(path="/pstore/apps/bioinfo/geneexpression/data/gmt",
                                            mps=mps)

    if(!is.null(appendGmt)) {
        doLog("Importing user defined gene sets", level=1)
        userGeneSets <- readGmt(user=appendGmt)
        gscs <- appendGeneSets(gscs, userGeneSets)
    }
    
    doLog("Performing pathway analysis", level=1)
    gseRes <- doGse(dgeTest, gscs)
    enrichTbl <- fullEnrichTable(gseRes)
 
    doLog("Exporting pathway analysis results", level=1)
    writeGmt(gscs, file=file.path(outdir, "camera-genesets.gmt"))
    writeMatrix(enrichTbl, file=file.path(outdir, "camera-results.txt"), row.names=FALSE)
}

##----------------------------------------##
## Write into ROGER
##----------------------------------------##
if(writedb) {
  doLog("Writing to the ROGER database")
  libordie("ribiosROGER")
  if(!is.null(phenoDataFile)) {
    ## TODO: fail if the first column is not unique (which should contain sample names)
    pd <- Biobase::read.AnnotatedDataFrame(phenoDataFile)
  } else {
    pd <- data.frame(Sample=sampleNames(dgeTest))
  }
  pd$`_DatasetSampleIndex` <- 1:nrow(pd)
  pd$`_Sample` <- colnames(counts(dgeTest))
  pd$`_SampleGroup` <- ribiosExpression::groups(objAnno)
  con <- ribiosROGER::devROGER()
  rogerRes <- importEdgeResult(con, dgeTest, objAnno, 
                   phenoData=pd, xref=xref, anno=!noAnno,
                   enrichTbl=enrichTbl, verbose=TRUE)
  dbDisconnect(con)
  doLog("ROGER Dataset ID %d", rogerRes$datasetID)
  doLog("ROGER Design ID %d", rogerRes$designID)
  doLog("ROGER Contrast ID %s", paste(rogerRes$contrastID, collapse=","))
}

##----------------------------------------##
## Visualizations
##----------------------------------------##
doLog("Visualizing gene-level results")
objModLogCPM <- modLogCPM(dgeTest)
groupLabels <- dispGroups(dgeTest)
groupCol <- fcbrewer(groupLabels)
openFileDevice(file.path(outdir, "gene-results-visualization.pdf"))

## Dimension reduction
### MDS
plotMDS(dgeTest, main="MDS plot")

### PCA (using modLogCPM)
objPca <- prcomp(t(objModLogCPM))
objPca.data <- plotPCA(objPca, points=FALSE, text=TRUE, main="modLogCPM PCA")

### COA (using mogLogCPM)
objCoa <- ord(objModLogCPM)$or$co
plotarrays(objCoa, classvec=dispGroups(dgeTest))

## BioQC
### TODO: RPKM/TPM calculation needed
## doLog("BioQC (TODO)")

## Normalization
### boxplot of read counts (before and after normalization)
normBoxplot(obj, dgeTest)

### boxplot of normalization factors
boxplot(dgeTest, type="normFactors")

## Dispersion
### BCV plot
plotBCV(dgeTest, main="BCV plot")

## Significant differentially expressed genes
## number of significantly differentially expressed genes
sigGeneBarchart(dgeTest, stack=FALSE)

## volcano plot
volcanoPlot(dgeTest, multipage=TRUE)

## plotSmear
smearPlot(dgeTest, freeRelation=TRUE, smooth.scatter=FALSE, multipage=TRUE)

## pairs of correlations
if(ncol(contrastMatrix(dgeTest))>1) {
    pairs(dgeTest, freeRelation=TRUE)
}

closeFileDevice()



##----------------------------------------##
## Program exiting
##----------------------------------------##
doLog("Program exits")
qqmsg(status=0L)
